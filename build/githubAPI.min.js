var Github=function(accessToken,profile){this.accessToken=accessToken;this.profile=profile;console.assert(this.profile.username==="supereditor","username"+this.profile.username)};if(typeof window==="undefined")module.exports=Github;Github.Flow=function(){var self,stack=[],timerId=setTimeout(function(){timerId=null;self._next()},0);return self={destroy:function(){timerId&&clearTimeout(timerId)},par:function(callback,isSeq){if(isSeq||!(stack[stack.length-1]instanceof Array))stack.push([]);stack[stack.length-1].push(callback);return self},seq:function(callback){return self.par(callback,true)},_next:function(err,result){var errors=[],results=[],callbacks=stack.shift()||[],nbReturn=callbacks.length,isSeq=nbReturn==1;for(var i=0;i<callbacks.length;i++){(function(fct,index){fct(function(error,result){errors[index]=error;results[index]=result;if(--nbReturn==0)self._next(isSeq?errors[0]:errors,isSeq?results[0]:results)},err,result)})(callbacks[i],i)}}}};var Github=Github||require("./github.main.js");Github.prototype.getRepos=function(onLoad){var urlGet="/user/repos";var github=this;github.get(urlGet,onLoad)};Github.prototype.createRepo=function(repoName,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");var github=this;var dataToPost={name:repoName,description:"silly repository description"};var path="/user/repos";github.post(path,dataToPost,function(data){onLoad(data)})};Github.prototype.deleteRepo=function(repoName,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");var github=this;var dataToPost={};var path="/repos/"+github.profile.username+"/"+repoName;github.delete(path,dataToPost,function(data){onLoad(data)})};var Github=Github||require("./github.main.js");Github.prototype.createOrUpdateFile=function(repoName,path,message,content,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");var github=this;Github.Flow().seq(function(next){var apiPath="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github.get(apiPath,function(data){console.log("createOrUpdateFile get content");console.dir(data);next(data)})}).seq(function(next,result,error){var githubFile=result;var dataToPost={message:message,content:base64Encode(content),sha:githubFile.sha};var apiPath="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github._requestWrite("PUT",apiPath,dataToPost,function(data){onLoad(data)})});return;function base64Encode(content){var inNode=typeof window==="undefined"?true:false;if(inNode){return new Buffer(content).toString("base64")}else{return window.btoa(content)}var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}}};Github.prototype.deleteRecursive=function(repoName,path,onLoad){var github=this;github.filesList(repoName,path,function(filesPath){var flow=Github.Flow();filesPath.forEach(function(filePath){flow.seq(function(next){github.deleteFile(repoName,filePath,"reccursive delete",function(){next()})})});flow.seq(function(next){onLoad("all done!")})})};Github.prototype.filesList=function(repoName,rootPath,onLoad){var github=this;var filesList=[];getNode(filesList,rootPath,function(data){onLoad(filesList)});return;function getNode(filesList,path,onLoad){github.getContent(repoName,path,function(data){var items=data;items.forEach(function(item){if(item.type==="file"){var fullName=path+(path?"/":"")+item.name;filesList.push(fullName)}else if(item.type==="dir"){}else console.assert(false)});var flow=Github.Flow();items.forEach(function(item){if(item.type!=="dir")return;flow.seq(function(next){var fullName=path+(path?"/":"")+item.name;getNode(filesList,fullName,function(child){next()})})});flow.seq(function(next){onLoad()})})}};var Github=Github||require("./github.main.js");Github.prototype.get=function(path,onLoad){var github=this;github._requestRead("GET",path,onLoad)};Github.prototype.post=function(path,dataToPost,onLoad){var github=this;github._requestWrite("POST",path,dataToPost,onLoad)};Github.prototype.put=function(path,dataToPost,onLoad){var github=this;github._requestWrite("PUT",path,dataToPost,onLoad)};Github.prototype.delete=function(path,dataToPost,onLoad){var github=this;github._requestWrite("DELETE",path,dataToPost,onLoad)};Github.prototype._requestRead=function(method,path,onLoad){var github=this;console.assert(this.profile.username==="supereditor","Only supereditor github user!");var inNode=typeof window==="undefined"?true:false;if(inNode===false){path+="?access_token="+github.accessToken;var url="https://api.github.com";url+=path;var request=new XMLHttpRequest;request.onload=function(){var content=request.responseText;var json=JSON.parse(content);onLoad(json)};request.open(method,url,true);request.send();return}var options={host:"api.github.com",headers:{"User-Agent":"threex.gameeditor UserAgent"},path:path+"?access_token="+github.accessToken,method:method};console.log("GITHUB",options.method,options.path);var request=require("https").request(options,function(httpResponse){var data="";httpResponse.setEncoding("utf8");httpResponse.on("data",function(chunk){data+=chunk});httpResponse.on("end",function(){var json=JSON.parse(data);onLoad(json)})});request.end()};Github.prototype._requestWrite=function(method,path,dataToPost,onLoad){var github=this;console.assert(this.profile.username==="supereditor","Only supereditor github user!");if(typeof dataToPost!=="string"){dataToPost=JSON.stringify(dataToPost)}var inNode=typeof window==="undefined"?true:false;if(inNode===false){path+="?access_token="+github.accessToken;var url="https://api.github.com";url+=path;var request=new XMLHttpRequest;request.onload=function(){var content=request.responseText;var json=JSON.parse(content);onLoad(json)};request.open(method,url,true);request.send(dataToPost);return}var options={host:"api.github.com",headers:{"User-Agent":"threex.gameeditor UserAgent","Content-Type":"application/json","Content-Length":dataToPost.length},path:path+"?access_token="+github.accessToken,method:method};console.log("GITHUB",options.method,options.path);var request=require("https").request(options,function(httpResponse){var data="";httpResponse.setEncoding("utf8");httpResponse.on("data",function(chunk){data+=chunk});httpResponse.on("end",function(){if(data.length>0){onLoad(JSON.parse(data))}else{onLoad(data)}})});request.write(dataToPost);request.end()};var Github=Github||require("./github.main.js");Github.prototype.getContent=function(repoName,path,onLoad){var urlGet="/repos/"+this.profile.username+"/"+repoName+"/contents/"+path;var github=this;github.get(urlGet,onLoad)};Github.prototype.getContent=function(repoName,path,onLoad){var urlGet="/repos/"+this.profile.username+"/"+repoName+"/contents/"+path;var github=this;github.get(urlGet,onLoad)};Github.prototype.getReadme=function(repoName,onLoad){var urlGet="/repos/"+this.profile.username+"/"+repoName+"/readme";var github=this;github.get(urlGet,onLoad)};Github.prototype.createFile=function(repoName,path,message,content,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");github.checkUserBlacklist();var github=this;var dataToPost={message:message,content:new Buffer(content).toString("base64")};var putUrl="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github._requestWrite("PUT",putUrl,dataToPost,function(data){onLoad(data)})};Github.prototype.updateFile=function(repoName,path,message,content,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");var github=this;Github.Flow().seq(function(next){var apiPath="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github.get(apiPath,function(data){next(data)})}).seq(function(next,result,error){var githubFile=result;var dataToPost={message:message,content:new Buffer(content).toString("base64"),sha:githubFile.sha};var apiPath="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github._requestWrite("PUT",apiPath,dataToPost,function(data){onLoad(data)})})};Github.prototype.deleteFile=function(repoName,path,message,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");var github=this;Github.Flow().seq(function(next){var apiPath="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github.get(apiPath,function(data){next(data)})}).seq(function(next,result,error){var githubFile=result;var dataToPost={message:message,sha:githubFile.sha};var apiPath="/repos/"+github.profile.username+"/"+repoName+"/contents/"+path;github._requestWrite("DELETE",apiPath,dataToPost,function(data){onLoad(data)})})};var Github=Github||require("./github.main.js");Github.prototype.createFork=function(forkOwner,forkRepoName,onLoad){console.assert(this.profile.username==="supereditor","Only supereditor github user!");var github=this;var dataToPost={};var putUrl="/repos/"+forkOwner+"/"+forkRepoName+"/forks";github._requestWrite("POST",putUrl,dataToPost,function(data){onLoad(data)})};var Github=Github||require("./github.main.js");Github.userBlackList=[];Github.prototype.checkUserBlacklist=function(userName){return Github.userBlackList.indexOf(userName)!==-1?false:true};